
local funicular = require "snowball_funicular"
local linq = require "snowball_funicular_linq"
local modes = {"plan", "build", "reset"}

local function createParams()
    local params = {}
    params[#params + 1] = {
        key = "snowball_funicular_mode",
        name = _("snowball_funicular_mode"),
        values = {
            _("snowball_funicular_mode_plan"),
            _("snowball_funicular_mode_build"),
            _("snowball_funicular_mode_reset")
        },
        defaultIndex = 0
    }
    params[#params + 1] = {
        key = "snowball_funicular_helper",
        name = _("snowball_funicular_helper"),
        values = {_("snowball_funicular_helper_off"), "1x", "2x", "4x", "8x", "16x"},
        defaultIndex = 0
    }

    params[#params + 1] = {
        key = "isstation",
        name = _("isstation"),
        values = {"jop", "ne"},
        defaultIndex = 1
    }
 
    params[#params + 1] = {
        key = "snowball_funicular_length",
        name = _("snowball_funicular_length"),
        values =  linq.select(funicular.lengths, tostring),
        defaultIndex = 2
    }

    params[#params + 1] = {
        key = "snowball_funicular_tracks",
        name = _("snowball_funicular_tracks"),
        values = {"A", "AB", "A-B"},
        defaultIndex = 0
    }

    if (funicular.trackParams) then        
        funicular.trackParams:createUIParams(params)        
    else
        params[#params + 1] = {
            key = "snowball_funicular_type",
            name = _("snowball_funicular_type"),
            values = {_("snowball_funicular_type_wood"), _("snowball_funicular_type_stone")},
            defaultIndex = 0
        }

        params[#params + 1] = {
            key = "catenary",
            name = _("Catenary"),
            values = { _("No"), _("Yes") },
            defaultIndex = 1,
            yearFrom = 1910,
            yearTo = 0
        }
    end

    params[#params + 1] = {
        key = "snowball_funicular_transition",
        name = _("snowball_funicular_transition"),
        values = linq.select(funicular.transitions, function(transition) return transition.name end),
        defaultIndex = 0
    }

    params[#params + 1] = {
        key = "snowball_funicular_rack",
        name = _("snowball_funicular_rack"),
        values = {_("snowball_funicular_rack_no"), _("snowball_funicular_rack_yes")},
        defaultIndex = 1
    }
    params[#params + 1] = {
        key = "snowball_funicular_slope_sign",
        name = _("snowball_funicular_slope_sign"),
        values = {
            _("snowball_funicular_slope_sign_positive"),
            _("snowball_funicular_slope_sign_negative"),
            _("snowball_funicular_slope_sign_auto")
        },
        defaultIndex = 0
    }
    params[#params + 1] = {
        key = "snowball_funicular_slope_10",
        name = _("snowball_funicular_10_percent"),
        values = {_("0"), _("1"), _("2"), _("3"), _("4"), _("5"), _("6"), _("7"), _("8"), _("9")},
        defaultIndex = 0
    }
    params[#params + 1] = {
        key = "snowball_funicular_slope_1",
        name = _("snowball_funicular_1_percent"),
        values = {_("0"), _("1"), _("2"), _("3"), _("4"), _("5"), _("6"), _("7"), _("8"), _("9")},
        defaultIndex = 0
    }    

    return params
end

function data()
    return {
        type = "RAIL_STATION",
        buildMode = "MULTI",
        description = {
            name = _("snowball_funicular_title"),
            description = _("snowball_funicular_description")
        },
        categories = {"snowball_funicular"},
        availability = {},
        order = 197720809,
        skipCollision = true,
        autoRemovable = false,
        params = createParams(),
        updateFn = function(params)
            local result = {
                models = {},
                terrainAlignmentLists = {
                    {
                        type = "EQUAL",
                        faces = {},
                        slopeLow = 1,
                        slopeHigh = 1
                    }
                }
            }

            local mode = modes[params.snowball_funicular_mode + 1]
            local trackType = funicular.getTrackType(params)
            local rack = params.snowball_funicular_rack == 1
            local slope = params.snowball_funicular_slope_10 * 10 + params.snowball_funicular_slope_1
            local helper = params.snowball_funicular_helper
            local tracks = funicular.trackPositions[params.snowball_funicular_tracks + 1]
            local length = funicular.lengths[params.snowball_funicular_length + 1]           
            if params.snowball_funicular_slope_sign == 1 then
                slope = slope * -1
            elseif params.snowball_funicular_slope_sign == 2 then
                slope = nil
            end

            funicular.updateStations()

            if not params.snowball_funicular_upgrade then
                funicular.upgradeStations(helper)
            end
            if mode == "plan" then
                funicular.plan(slope, length, tracks, trackType, rack, helper, result)
            elseif mode == "build" then
                funicular.build(result)
            elseif mode == "reset" then
                funicular.reset(result)
            end

            return result
        end
    }
end
