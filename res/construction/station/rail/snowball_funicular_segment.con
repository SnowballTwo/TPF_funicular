local colliderutil = require "colliderutil"
local constructionutil = require "constructionutil"
local funicular = require "snowball_funicular"
local vec2 = require "snowball_funicular_vec2"
local vec3 = require "snowball_funicular_vec3"
local directions = {1, 0, -1}

local function deCasteljau(p0, p1, p2, p3, parts)
    local result = {}

    for i = 0, parts do
        local t = 1.0 / parts * i

        local x =
            t * t * t * (p0[1] * -1 + p1[1] * 3 + p2[1] * -3 + p3[1]) + t * t * (p0[1] * 3 + p1[1] * -6 + p2[1] * 3) +
            t * (p0[1] * -3 + p1[1] * 3) +
            p0[1]

        local y =
            t * t * t * (p0[2] * -1 + p1[2] * 3 + p2[2] * -3 + p3[2]) + t * t * (p0[2] * 3 + p1[2] * -6 + p2[2] * 3) +
            t * (p0[2] * -3 + p1[2] * 3) +
            p0[2]

        result[#result + 1] = {x, y}
    end

    return result
end

local function arcSegment(radius, center, angle, direction, parts)
    local da = angle / parts
    local result = {}

    for i = 0, parts do
        local a = i * da
        result[#result + 1] = {math.cos(a) * radius * direction + center[1], math.sin(a) * radius + center[2]}
    end

    return result
end

local function lineSegment(p1, p2, parts)
    local result = {}

    local x = p1[1]
    local y = p1[2]
    local z = p1[3]

    local p = 1.0 / parts
    local dx = (p2[1] - p1[1]) * p
    local dy = (p2[2] - p1[2]) * p
    local dz = (p2[3] - p1[3]) * p

    for i = 0, parts do
        result[#result + 1] = {x + i * dx, y + i * dy, z + i * dz}
    end

    return result
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Truck station"),
            description = _("Truck station with two cargo terminals.")
        },
        categories = {"snowball_funicular"},
        availability = {
            yearFrom = 244,
            yearTo = 245
        },
        order = 1977208010,
        params = {
            {
                key = "snowball_funicular_direction",
                name = _("snowball_funicular_direction"),
                values = {_("left"), _("straight"), _("right")},
                defaultIndex = 1
            },
            {
                key = "snowball_funicular_rack",
                name = _("snowball_funicular_rack"),
                values = {_("yes"), _("no")},
                defaultIndex = 1
            },
            {
                key = "snowball_funicular_radius_100",
                name = _("snowball_funicular_radius_100"),
                values = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
                defaultIndex = 2
            },
            {
                key = "snowball_funicular_radius_10",
                name = _("snowball_funicular_radius_10"),
                values = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
                defaultIndex = 0
            },
            {
                key = "snowball_funicular_length_100",
                name = _("snowball_funicular_length_100"),
                values = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
                defaultIndex = 1
            },
            {
                key = "snowball_funicular_length_10",
                name = _("snowball_funicular_length_10"),
                values = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
                defaultIndex = 0
            },
            {
                key = "snowball_funicular_slope_10",
                name = _("snowball_funicular_slope_10"),
                values = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
                defaultIndex = 2
            },
            {
                key = "snowball_funicular_slope_1",
                name = _("snowball_funicular_slope_1"),
                values = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"},
                defaultIndex = 0
            }
        },
        updateFn = function(params)
            local result = {
                models = {}
            }

            local width = 10
            local prewidth = 20
            local length =
                math.max(50, 100 * (params.snowball_funicular_length_100) + 10 * (params.snowball_funicular_length_10))
            local slope = 0.1 * (params.snowball_funicular_slope_10) + 0.01 * (params.snowball_funicular_slope_1)
            local radius =
                math.max(10, 100 * (params.snowball_funicular_radius_100) + 10 * (params.snowball_funicular_radius_10))
            local direction = directions[params.snowball_funicular_direction + 1]
            local rack = params.snowball_funicular_rack == 0

            local up = length * slope
            local height = params.state.track.railBase + params.state.track.railHeight

            local k = 0.5528
            local angle = length / radius

            local d = {(math.cos(angle) * radius - radius) * direction, math.sin(angle) * radius, up}
            local dne = vec3.normalize({-math.sin(angle) * direction, math.cos(angle), 0})

            if (direction == 0) then
                d = {0, length, up}
                dne = {0, 1, 0}
            end

            local dn = {dne[2], -dne[1], 0}
            local e = vec3.add(d, vec3.mul(prewidth, dne))

            local pre_snap = {0.0, -prewidth, 0}
            local pre_start = {0.0, 0.0, 0}
            local pre_vec = {0.0, prewidth, 0.0}

            local post_start = {d[1], d[2], up}
            local post_snap = {e[1], e[2], up}
            local post_vec = vec3.mul(prewidth, dne)

            result.edgeLists = {
                {
                    type = "TRACK",
                    params = {
                        catenary = false,
                        type = "standard.lua"
                    },
                    edges = {
                        {pre_snap, pre_vec},
                        {pre_start, pre_vec}
                    },
                    snapNodes = {0}
                },
                {
                    type = "TRACK",
                    params = {
                        catenary = false,
                        type = "standard.lua"
                    },
                    edges = {
                        {post_start, post_vec},
                        {post_snap, post_vec}
                    },
                    snapNodes = {1}
                }
            }
            local parts = math.round(length / funicular.segmentLength)
            local zcurve =
                deCasteljau({0, 0}, {length * 0.2, 0}, {length - length * 0.2, up}, {length, up}, parts)
            local ecurve = nil

            if direction == 0 then
                ecurve = lineSegment({0.0, 0.0, 0.0}, {0.0, length, 0.0}, parts)
            else
                ecurve = arcSegment(radius, {-radius * direction, 0}, angle, direction, parts)
            end

            for i = 1, #ecurve do
                ecurve[i][3] = zcurve[i][2]
            end
            funicular.buildTrack(
                ecurve,
                vec3.normalize(vec3.sub(pre_start, pre_snap)),
                vec3.normalize(vec3.sub(post_snap, post_start)),
                0,
                rack,
                false,
                result
            )

            return result
        end
    }
end
