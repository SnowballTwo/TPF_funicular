local funicular = require "snowball_funicular"
local colliderutil = require "colliderutil"
local constructionutil = require "constructionutil"
local vec2 = require "snowball_funicular_vec2"
local vec3 = require "snowball_funicular_vec3"
local mat3 = require "snowball_funicular_mat3"
local polygon = require "snowball_funicular_polygon"
local spline = require "snowball_funicular_spline"
local segment = require "snowball_funicular_segment"
local vec4 = require "vec4"
local transf = require "transf"

function data()
	return {
		type = "RAIL_STATION",
		availability = {
			yearFrom = 244,
			yearTo = 245
		},
		description = {
			name = _("patch_title"),
			description = _("patch_description")
		},
		order = 197720202,
		skipCollision = true,
		autoRemovable = false,
		updateFn = function(params)
			local result = {
				models = {},
				cost = 10,
				bulldozeCost = 10,
				maintenanceCost = 0
			}

			result.terrainAlignmentLists = {
				{
					type = "EQUAL",
					faces = {}
				}
			}

			local segments = params.segments

			result.models[#result.models + 1] = {
				id = "asset/snowball_funicular_suspensor.mdl",
				transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
			}

			if not segments or not params.forReal then				
				return result
			end

			result.edgeLists = {}

			for i = 1, #segments do	
				setmetatable(segments[i], segment)
				segments[i]:BuildEdges( result )
			end									
			
			return result
		end
	}
end
